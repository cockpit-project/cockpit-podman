#!/usr/bin/python3
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/master/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import os
import sys

# import Cockpit's machinery for test VMs and its browser test API
TEST_DIR = os.path.dirname(__file__)
sys.path.append(os.path.join(TEST_DIR, "common"))
sys.path.append(os.path.join(os.path.dirname(TEST_DIR), "bots/machine"))
import testlib


class TestApplication(testlib.MachineCase):

    def testBasic(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/podman")
        b.wait_present("#app")
        b.wait_present(".content-filter div")
        b.wait_present("#containers-images")
        b.wait_in_text("#containers-images", "busybox:latest")

        # show image listing toggle
        b.wait_present('#containers-images tr:contains("busybox:latest")')
        b.click('#containers-images tbody tr:contains("busybox:latest") td.listing-ct-toggle')
        b.wait_present('#containers-images tbody tr:contains("busybox:latest") + tr button.btn-delete')

        # run a container (will exit immediately)
        m.execute("podman run -d --name test-sh alpine sh")
        # run a container
        m.execute("podman run -d --name swamped-crate busybox sleep 1000")

        # FIXME: UI needs to listen to change signals and update automatically

        b.reload()
        b.enter_page("/podman")
        b.wait_present("#containers-containers-filter button")

        # show all containers and check status
        b.click("#containers-containers-filter button")
        b.wait_present("#containers-containers-filter .dropdown-menu")
        b.click("#containers-containers-filter li[data-data='all'] a")
        b.wait_present("#containers-containers")
        b.wait_present('#containers-containers tr:contains("busybox:latest")')
        b.wait_present('#containers-containers tr:contains("alpine:latest")')
        # check busybox is running and alpine is exited
        b.wait_present('#containers-containers tr:contains("busybox:latest") td:contains("running")')
        b.wait_present('#containers-containers tr:contains("alpine:latest") td:contains("exited")')

        # show container listing toggle
        b.click('#containers-containers tbody tr:contains("busybox:latest") td.listing-ct-toggle')
        b.wait_present('#containers-containers tbody tr:contains("busybox:latest") + tr button.btn-delete')
        # test the container stop dropdown menu under the listing toggle
        self.containerStopDropdown()

        #show running container
        b.click("#containers-containers-filter button")
        b.wait_present("#containers-containers-filter .dropdown-menu")
        b.click("#containers-containers-filter li[data-data='running'] a")
        b.wait_present('#containers-containers tr:contains("busybox:latest")')
        b.wait_present('#containers-containers tr:contains("swamped-crate")')
        b.wait_present('#containers-containers tr:contains("busybox:latest") + tr:contains("sleep 1000")')

        # switch to all containers
        b.wait_present("#containers-containers-filter button")
        b.click("#containers-containers-filter button")
        b.wait_present("#containers-containers-filter .dropdown-menu")
        b.click("#containers-containers-filter li[data-data='all'] a")
        b.wait_present("#containers-containers")
        b.wait_present('#containers-containers tr:contains("busybox:latest") td:contains("running")')
        b.wait_present('#containers-containers tr:contains("test-sh")')
        b.wait_present('#containers-containers tr:contains("alpine:latest") td:contains("exited")')

        # delete a stopped container
        b.click('#containers-containers tbody tr:contains("alpine:latest") td.listing-ct-toggle')
        b.wait_present('#containers-containers tbody tr:contains("alpine:latest") + tr button.btn-delete')
        b.click('#containers-containers tbody tr:contains("alpine:latest") + tr button.btn-delete')
        b.wait_present(".modal-dialog div")
        b.wait_present(".modal-dialog div .btn-danger")
        b.click(".modal-dialog div .btn-danger")
        b.wait_not_present(".modal-dialog div")
        self.pageReload()
        self.loadAllContainerlist()
        b.wait_present("#containers-containers")
        b.wait_not_in_text("#containers-containers", "alpine:latest")

        # delete a running container
        b.wait_present("#containers-containers")
        b.wait_present('#containers-containers tbody tr:contains("busybox:latest")')
        b.click('#containers-containers tbody tr:contains("busybox:latest") td.listing-ct-toggle')
        b.wait_present('#containers-containers tbody tr:contains("busybox:latest") + tr button.btn-delete')
        b.click('#containers-containers tbody tr:contains("busybox:latest") + tr button.btn-delete')
        b.wait_present(".modal-dialog div")
        b.wait_present(".modal-dialog div .btn-danger")
        b.click(".modal-dialog div .btn-danger")
        self.confirm()
        b.wait_not_in_text("#containers-containers", "busybox:latest")

    def confirm(self):
        b = self.browser
        b.wait_present(".modal-dialog div")
        b.wait_present(".modal-dialog div .btn-danger")
        b.click(".modal-dialog div .btn-danger")

    def pageReload(self):
        """Page reload and wait for it to be built up again"""
        b = self.browser
        b.reload()
        b.enter_page("/podman")

    def loadAllContainerlist(self):
        """Load and expand the container list with all containers"""

        b = self.browser
        b.wait_present("#app")
        b.wait_present(".content-filter div")
        b.click("#containers-containers-filter button")
        b.wait_present("#containers-containers")
        # show all containers to interact with stopped ones
        b.wait_present("#containers-containers-filter .dropdown-menu")
        b.click("#containers-containers-filter li[data-data='all'] a")
        b.wait_present("#containers-containers")

    def containerStopDropdown(self):
        b = self.browser
        b.wait_present('#containers-containers tbody tr:contains("busybox:latest") + tr button span.caret')
        b.click('#containers-containers tbody tr:contains("busybox:latest") + tr button span.caret')
        b.wait_present('#containers-containers tbody tr:contains("busybox:latest") + tr ul:contains("Stop")')
        b.wait_present('#containers-containers tbody tr:contains("busybox:latest") + tr ul:contains("Restart")')

if __name__ == '__main__':
    testlib.test_main()