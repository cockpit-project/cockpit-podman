#!/usr/bin/python3 -cimport os, sys; os.execv(os.path.dirname(sys.argv[1]) + "/common/pywrap", sys.argv)
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/main/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import re
import sys
import time

import testlib
from machine.machine_core import ssh_connection

REGISTRIES_CONF = """
[registries.search]
registries = ['localhost:5000', 'localhost:6000']

[registries.insecure]
registries = ['localhost:5000', 'localhost:6000']
"""

NOT_RUNNING = ["Exited", "Stopped"]

# image names used in tests
IMG_ALPINE = "localhost/test-alpine"
IMG_ALPINE_LATEST = IMG_ALPINE + ":latest"
IMG_BUSYBOX = "localhost/test-busybox"
IMG_BUSYBOX_LATEST = IMG_BUSYBOX + ":latest"
IMG_REGISTRY = "localhost/test-registry"
IMG_REGISTRY_LATEST = IMG_REGISTRY + ":latest"


def podman_version(cls):
    version = cls.execute(False, "podman -v").strip().split(' ')[-1]
    # HACK: handle possible rc versions such as 4.4.0-rc2
    return tuple(int(v.split('-')[0]) for v in version.split('.'))


def showImages(browser):
    if browser.attr("#containers-images button.pf-v5-c-expandable-section__toggle", "aria-expanded") == 'false':
        browser.click("#containers-images button.pf-v5-c-expandable-section__toggle")


def checkImage(browser, name, owner):
    showImages(browser)
    browser.wait_visible("#containers-images table")
    browser.wait_js_func("""(function (first, last) {
        let items = ph_select("#containers-images table tbody");
        for (i = 0; i < items.length; i++)
            if (items[i].innerText.trim().startsWith(first) && items[i].innerText.trim().includes(last))
                return true;
        return false;
        })""", name, owner)


@testlib.nondestructive
class TestApplication(testlib.MachineCase):

    def setUp(self):
        super().setUp()
        m = self.machine
        m.execute("""
            systemctl stop podman.service; systemctl --now enable podman.socket
            # Ensure podman is really stopped, otherwise it keeps the containers/ directory busy
            pkill -e -9 podman || true
            while pgrep podman; do sleep 0.1; done
            pkill -e -9 conmon || true
            while pgrep conmon; do sleep 0.1; done
            findmnt --list -otarget | grep /var/lib/containers/. | xargs -r umount
            sync
            """)

        # backup/restore pristine podman state, so that tests can run on existing testbeds
        self.restore_dir("/var/lib/containers")

        self.addCleanup(m.execute, """
            systemctl stop podman.service podman.socket

            # HACK: system reset has 10s timeout, make that faster with an extra `stop`
            # https://github.com/containers/podman/issues/21874
            podman stop --time 0 --all
            podman pod stop --time 0 --all

            systemctl reset-failed podman.service podman.socket
            podman system reset --force
            pkill -e -9 podman || true
            while pgrep podman; do sleep 0.1; done
            pkill -e -9 conmon || true
            while pgrep conmon; do sleep 0.1; done

            # HACK: sometimes podman leaks mounts
            findmnt --list -otarget | grep /var/lib/containers/. | xargs -r umount
            sync
            """)

        # Create admin session
        m.execute("""
            if [ ! -d /home/admin/.ssh ]; then
                mkdir /home/admin/.ssh
                cp /root/.ssh/* /home/admin/.ssh
                chown -R admin:admin /home/admin/.ssh
                chmod -R go-wx /home/admin/.ssh
            fi
            """)
        self.admin_s = ssh_connection.SSHConnection(user="admin",
                                                    address=m.ssh_address,
                                                    ssh_port=m.ssh_port,
                                                    identity_file=m.identity_file)

        # Enable user service as well; copy our images (except cockpit/ws) from system
        self.admin_s.execute("""
            systemctl --user stop podman.service
            for img in $(ls /var/lib/test-images/*.tar | grep -v cockpitws); do podman load < "$img"; done
            systemctl --now --user enable podman.socket
            """)
        self.addCleanup(self.admin_s.execute, """
            systemctl --user stop podman.service podman.socket
            podman system reset --force
            """)
        # HACK: system reset has 10s timeout, make that faster with an extra `stop`
        # https://github.com/containers/podman/issues/21874
        # Ubuntu 22.04 has old podman that does not know about rm --time
        if m.image == 'ubuntu-2204':
            self.addCleanup(self.admin_s.execute, "podman rm --force --all", timeout=300)
            self.addCleanup(self.admin_s.execute, "podman pod rm --force --all", timeout=300)
        else:
            self.addCleanup(self.admin_s.execute, "podman rm --force --time 0 --all")
            self.addCleanup(self.admin_s.execute, "podman pod rm --force --time 0 --all")

        # But disable it globally so that "systemctl --user disable" does what we expect
        m.execute("systemctl --global disable podman.socket")

        self.allow_journal_messages("/run.*/podman/podman: couldn't connect.*")
        self.allow_journal_messages(".*/run.*/podman/podman.*Connection reset by peer")

        # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1008249
        self.has_criu = "debian" not in m.image and "ubuntu" not in m.image
        self.has_selinux = not any(img in m.image for img in ["arch", "debian", "ubuntu", "suse"])
        self.has_cgroupsV2 = not m.image.startswith('rhel-8')

        # allow console.error
        self.allow_browser_errors(
            ".*couldn't search registry \".*\": pinging container registry .*",
            ".*Error occurred while connecting console: cannot resize session: cannot resize container.*",
        )

    def testManifest(self):
        m = self.machine
        m.execute("""
        podman run -d --tty --name testing localhost/test-busybox sh
        podman --log-level=debug container checkpoint --keep --tcp-established testing || true;
        ls -lh  /var/lib/containers/storage/overlay-containers/*/userdata;
        cat /var/lib/containers/storage/overlay-containers/*/userdata/dump.log || true;
        exit 1
        """)


if __name__ == '__main__':
    testlib.test_main()
