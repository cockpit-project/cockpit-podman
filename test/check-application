#!/usr/bin/python3
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/master/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import os
import sys

# import Cockpit's machinery for test VMs and its browser test API
TEST_DIR = os.path.dirname(__file__)
sys.path.append(os.path.join(TEST_DIR, "common"))
sys.path.append(os.path.join(os.path.dirname(TEST_DIR), "bots/machine"))
import testlib


class TestApplication(testlib.MachineCase):

    def testBasic(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/podman")
        b.wait_present("#app")
        b.wait_present(".content-filter div")
        b.wait_present("#containers-images")
        b.wait_in_text("#containers-images", "busybox:latest")

        # show image listing toggle
        b.wait_present('#containers-images tr:contains("busybox:latest")')
        b.click('#containers-images tbody tr:contains("busybox:latest") td.listing-ct-toggle')
        b.wait_present('#containers-images tbody tr:contains("busybox:latest") + tr button.btn-delete')

        # make sure no running containers shown
        self.filter_containers('running')
        b.wait_present("#containers-containers")
        b.wait_in_text("#containers-containers", "No running containers")

        # run a container (will exit immediately)
        m.execute("podman run -d --name test-sh alpine sh")
        # run a container
        m.execute("podman run -d --name swamped-crate busybox sleep 1000")

        # FIXME: UI needs to listen to change signals and update automatically

        b.reload()
        b.enter_page("/podman")

        # running busybox shown
        b.wait_present("#containers-containers")
        b.wait_present('#containers-containers tr:contains("swamped-crate")')
        self.check_container('swamped-crate', ['swamped-crate', 'busybox:latest', 'sleep 1000', 'running'])

        # exited alpine not shown
        b.wait_not_in_text("#containers-containers", "alpine:latest")

        # show all containers and check status
        self.filter_containers('all')

        # exited alpine under everything list
        b.wait_present("#containers-containers")
        b.wait_present('#containers-containers tr:contains("test-sh")')
        self.check_container('test-sh', ['test-sh', 'alpine:latest', 'sh', 'exited'])

        # show container listing toggle
        b.click('#containers-containers tbody tr:contains("busybox:latest") td.listing-ct-toggle')
        b.wait_present('#containers-containers tbody tr:contains("busybox:latest") + tr button.btn-delete')

        # show running container
        self.filter_containers('running')
        b.wait_present('#containers-containers tr:contains("busybox:latest")')
        self.check_container('swamped-crate', ['swamped-crate', 'busybox:latest', 'sleep 1000', 'running'])
        # check exited alpine not in running list
        b.wait_not_in_text("#containers-containers", "alpine:latest")

        # delete running container busybox using force delete
        b.click('#containers-containers tbody tr:contains("busybox:latest") + tr button.btn-delete')
        self.confirm_modal("btn-ctr-focedelete")
        b.wait_not_in_text("#containers-containers", "busybox:latest")

        # delete the exited alpine
        self.filter_containers("all")
        b.wait_present('#containers-containers tr:contains("alpine:latest")')
        b.click('#containers-containers tbody tr:contains("alpine:latest") td.listing-ct-toggle')
        b.wait_present('#containers-containers tbody tr:contains("alpine:latest") + tr button.btn-delete')
        b.click('#containers-containers tbody tr:contains("alpine:latest") + tr button.btn-delete')
        self.confirm_modal("btn-ctr-delete")
        b.wait_not_in_text("#containers-containers", "alpine:latest")

        # run a container (will exit immediately) and test the display of commit modal
        m.execute("podman run -d --name test-sh alpine sh")
        b.reload()
        b.enter_page("/podman")
        self.filter_containers("all")
        b.wait_present('#containers-containers tr:contains("alpine:latest")')
        b.click('#containers-containers tbody tr:contains("alpine:latest") td.listing-ct-toggle')
        # open commit modal and close it using cancel
        b.wait_present('#containers-containers tbody tr:contains("alpine:latest") + tr button.btn-commit')
        b.click('#containers-containers tbody tr:contains("alpine:latest") + tr button.btn-commit')
        self.confirm_modal("btn-ctr-cancel-commit")
        # open commit modal and create an image
        b.click('#containers-containers tbody tr:contains("alpine:latest") + tr button.btn-commit')
        b.wait_present(".modal-dialog div")
        # set commit parameters
        b.set_input_text("#imageName", "testimg")
        b.set_input_text("#tag", "testtag")
        b.set_input_text("#author", "tester")
        b.set_input_text("#command", "sleep 6000")
        b.click(".modal-dialog div .btn-ctr-commit")
        b.wait_not_present(".modal-dialog div")
        b.wait_present('#containers-images tr:contains("testimg:testtag")')
        b.click('#containers-images tbody tr:contains("testimg:testtag") td.listing-ct-toggle')
        # open the listing toggle of testimg and check the commit paramerters
        b.wait_present('#containers-images tbody tr:contains("testimg:testtag"):has(dd:contains("localhost/testimg:testtag"))')
        b.wait_present('#containers-images tbody tr:contains("testimg:testtag"):has(dd:contains("sleep 6000"))')
        b.wait_present('#containers-images tbody tr:contains("testimg:testtag"):has(dd:contains("tester"))')

        # open commit modal and check error modal
        b.click('#containers-containers tbody tr:contains("alpine:latest") + tr button.btn-commit')
        b.wait_present(".modal-dialog div")
        # check required field error
        b.click(".modal-dialog div .btn-ctr-commit")
        b.wait_present('.modal-dialog div:contains("Image name is required")')
        b.wait_present(".modal-dialog div .alert .close")
        b.click(".modal-dialog div .alert .close")
        b.wait_not_present(".modal-dialog div .alert")
        # check varlink error
        b.set_input_text("#imageName", "TEST")
        b.click(".modal-dialog div .btn-ctr-commit")
        b.wait_present(".modal-dialog div")
        b.wait_present('.modal-dialog div:contains("io.podman.ErrorOccurred")')
        b.wait_present(".modal-dialog div .alert .close")
        b.click(".modal-dialog div .alert .close")
        b.wait_not_present(".modal-dialog div .alert")

        # delete image busybox that hasn't been used
        b.wait_present('#containers-images tr:contains("busybox:latest")')
        b.click('#containers-images tbody tr:contains("busybox:latest") td.listing-ct-toggle')
        b.wait_present('#containers-images tbody tr:contains("busybox:latest") + tr button.btn-delete')
        b.click('#containers-images tbody tr:contains("busybox:latest") + tr button.btn-delete')
        b.wait_present(".modal-dialog div")
        b.wait_present(".modal-dialog div #btn-img-delete")
        b.click(".modal-dialog div #btn-img-delete")
        b.wait_not_present("modal-dialog div #btn-img-delete")
        b.wait_not_in_text("#containers-images", "busybox:latest")

        # delete image alpine that has been used by a container
        b.wait_present('#containers-images tr:contains("alpine:latest")')
        b.click('#containers-images tbody tr:contains("alpine:latest") td.listing-ct-toggle')
        b.wait_present('#containers-images tbody tr:contains("alpine:latest") + tr button.btn-delete')
        b.click('#containers-images tbody tr:contains("alpine:latest") + tr button.btn-delete')
        b.wait_present(".modal-dialog div")
        b.wait_present(".modal-dialog div #btn-img-delete")
        b.click(".modal-dialog div #btn-img-delete")
        b.wait_not_present("modal-dialog div #btn-img-delete")
        b.wait_present(".modal-dialog div")
        b.wait_present(".modal-dialog div #btn-img-deleteerror")
        b.click(".modal-dialog div #btn-img-deleteerror")
        b.wait_not_present("modal-dialog div #btn-img-deleteerror")
        b.wait_not_in_text("#containers-images", "alpine:latest")

    def testLifecycleOperations(self):
        b = self.browser
        m = self.machine

        # run a container
        m.execute("podman run -dit --name swamped-crate busybox sh; podman stop swamped-crate")
        b.wait(lambda: m.execute("podman ps --all | grep -e swamped-crate -e Exited"))

        self.login_and_go("/podman")
        b.wait_present("#app")
        b.wait_present(".content-filter div")
        self.filter_containers('all')

        b.wait_present("#containers-containers")
        b.wait_present('#containers-containers tr:contains("swamped-crate")')
        b.click('#containers-containers tbody tr:contains("busybox:latest") td.listing-ct-toggle')

        # Start the container
        b.wait_present('#containers-containers tbody tr:contains("busybox:latest") + tr button:contains(Start)')
        b.click('#containers-containers tbody tr:contains("busybox:latest") + tr button:contains(Start)')

        self.check_container('swamped-crate', ['swamped-crate', 'busybox:latest', 'sh', 'running'])

        # Restart the container
        old_pid = m.execute("podman inspect --format '{{.State.Pid}}' swamped-crate".strip());
        b.wait_present('#containers-containers tbody tr:contains("busybox:latest") + tr button:contains(Restart)')
        b.click('#containers-containers tbody tr:contains("busybox:latest") + tr button:contains(Restart)')
        b.wait_present('#containers-containers tbody tr:contains("busybox:latest") + tr ul.dropdown-menu li a:contains(Force Restart)')
        b.click('#containers-containers tbody tr:contains("busybox:latest") + tr ul.dropdown-menu li a:contains(Force Restart)')
        # We don't receive signals yet so restarting container will not update the state like running->stopped->running
        # but we 'll probably see no change at all.
        # Instead check that the PID of the container has changed.
        new_pid = m.execute("podman inspect --format '{{.State.Pid}}' swamped-crate".strip());
        self.assertNotEqual(old_pid, new_pid)

        # Reload page after restarting the container since we don't implement proper monitoring and guessing the state
        # can lead to unexpected behavior.
        b.reload()
        b.enter_page("/podman")
        self.filter_containers('all')
        b.wait_present("#containers-containers")
        b.wait_present('#containers-containers tr:contains("swamped-crate")')
        b.click('#containers-containers tbody tr:contains("busybox:latest") td.listing-ct-toggle')

        # Stop the container
        b.wait_present('#containers-containers tbody tr:contains("busybox:latest") + tr button:contains(Stop)')
        b.click('#containers-containers tbody tr:contains("busybox:latest") + tr button:contains(Stop)')
        b.wait_present('#containers-containers tbody tr:contains("busybox:latest") + tr ul.dropdown-menu li a:contains(Force Stop)')
        b.click('#containers-containers tbody tr:contains("busybox:latest") + tr ul.dropdown-menu li a:contains(Force Stop)')

        self.check_container('swamped-crate', ['swamped-crate', 'busybox:latest', 'sh', 'stopped'])

    def check_container(self, row_name, expected_strings):
        """Check the container with row_name has the expected_string shown in the row"""
        b = self.browser
        for str in expected_strings:
            b.wait_in_text('#containers-containers tr:contains(%s)' % row_name, str)

    def filter_containers(self, menu_text):
        """Use dropdown menu in the header to filter containers"""
        b = self.browser
        b.wait_present("#containers-containers-filter button")
        b.click("#containers-containers-filter button")
        b.wait_present("#containers-containers-filter .dropdown-menu")
        b.click("#containers-containers-filter li[data-data= %s] a" % menu_text)

    def confirm_modal(self, key_type):
        """Wait for the pop up window and click the button with className as key_type"""
        b = self.browser
        b.wait_present(".modal-dialog div")
        b.wait_present(".modal-dialog div .%s" % key_type)
        b.click(".modal-dialog div .%s" % key_type)
        b.wait_not_present(".modal-dialog div .%s" % key_type)

if __name__ == '__main__':
    testlib.test_main()
