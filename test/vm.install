#!/bin/sh
# image-customize script to enable cockpit in test VMs
set -eu

# for Debian based images, build and install debs; for RPM based ones, the locally built rpm gets installed separately
if [ -d /var/tmp/debian ]; then
    apt-get update
    eatmydata apt-get install -y cockpit-ws cockpit-system podman
    # HACK: 2.0.3 breaks API: https://bugs.debian.org/966501; upgrade to 2.0.4 in unstable
    if dpkg --compare-versions $(dpkg-query --show -f '${Version}' podman) lt 2.0.4; then
        echo 'deb http://deb.debian.org/debian unstable main' > /etc/apt/sources.list.d/unstable.list
        apt-get update
        eatmydata apt-get install -y podman
    fi
    # HACK: conmon 2.0.13 fixes podman exec; upgrade to 2.0.18 in unstable: https://bugs.debian.org/964858
    if dpkg --compare-versions $(dpkg-query --show -f '${Version}' conmon) lt 2.0.18; then
        echo 'deb http://deb.debian.org/debian unstable main' > /etc/apt/sources.list.d/unstable.list
        apt-get update
        eatmydata apt-get install -y conmon
    fi

    # HACK: starting podman.service complains about missing crun: https://bugs.debian.org/961016
    eatmydata apt-get install -y crun

    # HACK: podman.service should not be enabled: https://github.com/containers/podman/issues/7190
    systemctl disable podman.service
    systemctl disable --global podman.service
    sed -i '/\[Install\]/,$ d' /lib/systemd/system/podman.service /lib/systemd/user/podman.service

    # build source package
    cd /var/tmp
    TAR=$(ls cockpit-podman-*.tar.gz)
    VERSION="${TAR#cockpit-podman-}"
    VERSION="${VERSION%.tar.gz}"
    ln -s $TAR cockpit-podman_${VERSION}.orig.tar.gz
    tar xf "$TAR"
    cd cockpit-podman
    cp -r ../debian .
    sed -i "s/(0-1)/(${VERSION}-1)/" debian/changelog
    dpkg-buildpackage -S -us -uc -nc
    cd ..

    # build and install binary package
    pbuilder build --buildresult . *.dsc
    dpkg -i *.deb

    # Debian does not enable user namespaces by default
    echo kernel.unprivileged_userns_clone = 1 > /etc/sysctl.d/00-local-userns.conf
    systemctl restart systemd-sysctl

    # disable services that get in the way of /var/lib/containers
    if systemctl is-enabled docker.service; then
        systemctl disable docker.service
    fi
    systemctl disable io.podman.service
fi

if rpm -q podman >/dev/null 2>&1; then
    # HACK: podman 2.0.3 breaks API; upgrade to 2.0.4 in updates-testing
    dnf update -y --enablerepo=updates-testing podman
fi

systemctl enable cockpit.socket

# don't force https:// (self-signed cert)
printf "[WebService]\\nAllowUnencrypted=true\\n" > /etc/cockpit/cockpit.conf

if type firewall-cmd >/dev/null 2>&1; then
    firewall-cmd --add-service=cockpit --permanent
fi

# grab a few images to play with; tests run offline, so they cannot download images
podman rmi --all
podman pull docker.io/busybox
podman pull docker.io/alpine
podman pull docker.io/registry:2

# pull images for user podman tests; podman insists on user session
loginctl enable-linger $(id -u admin)
sudo -i -u admin bash << EOF
systemctl --user disable --now systemd-tmpfiles-clean.timer
podman rmi --all
podman pull docker.io/busybox
podman pull docker.io/alpine
podman pull docker.io/registry:2
EOF
loginctl disable-linger $(id -u admin)

# HACK: See https://github.com/cockpit-project/cockpit/issues/14133
mkdir -p /usr/share/cockpit/packagekit

# 15minutes after boot tmp files are removed and podman stores some tmp lock files
systemctl disable --now systemd-tmpfiles-clean.timer
